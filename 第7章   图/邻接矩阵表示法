#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>

#define MAX_VERTEX_NUM 200
#define INFINITY 999999 
#define INT_MAX 20
typedef enum { DG, DN, UDG, UDN } GraphKind;
typedef int VRType;
typedef char VertexType;

typedef struct ArcCell 
{
	VRType adj;
	
}ArcCell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];

typedef  struct {
	VertexType  vexs[MAX_VERTEX_NUM];   /*顶点向量*/
	AdjMatrix  arcs;     /*邻接矩阵*/
	int   vexnum, arcnum;         /*图的顶点数和弧数*/
	GraphKind  kind;                  /*图的种类标志*/
} MGraph;         /*（Adjacency Matrix Graph）*/

int LocateVex(MGraph G, VertexType v)
{
	for (int i = 0; i < G.vexnum; i++)
	{
		if (G.vexs[i] == v)
		{
			return i;
		}
	}
	printf("G中无%c点!\n",v);
	return -1;
}

MGraph CreateDG(MGraph *G)//有向图
{
	printf("输入图的边数和顶点数:\n");
	scanf("%d%d", &G->arcnum, &G->vexnum);/*输入图的顶点数和边数*/
	printf("输入图的顶点:\n");
	getchar();
	for (int i = 0; i < G->vexnum; i++)
	{
		scanf("%c", &G->vexs[i]);
		getchar();
	}
	/*初始化邻接矩阵*/
	for (int i = 0; i < MAX_VERTEX_NUM; i++)
	{
		for (int j = 0; j < MAX_VERTEX_NUM; j++)
		{
			G->arcs[i][j].adj = INFINITY;
		}
	}
	for (int k = 0; k < G->arcnum; k++)
	{
		VertexType v1 = '0', v2 = '0';
		VRType weight = 0;
		printf("输入一条边的两个顶点及权值:\n");
		scanf("%c%c%d",&v1, &v2, &weight);
		getchar();
		int i = LocateVex(*G, v1);
		int j = LocateVex(*G, v2);
		G->arcs[i][j].adj = weight;

	}
	return *G;
}
MGraph CreateDN(MGraph *G)
{
	printf("输入图的边数和顶点数:\n");
	scanf("%d%d", &G->arcnum, &G->vexnum);/*输入图的顶点数和边数*/
	printf("输入图的顶点:\n");
	getchar();
	for (int i = 0; i < G->vexnum; i++)
	{
		scanf("%c", &G->vexs[i]);
		getchar();
	}
	/*初始化邻接矩阵*/
	for (int i = 0; i < MAX_VERTEX_NUM; i++)
	{
		for (int j = 0; j < MAX_VERTEX_NUM; j++)
		{
			G->arcs[i][j].adj = INFINITY;
		}
	}
	for (int k = 0; k < G->arcnum; k++)
	{
		VertexType v1 = '0', v2 = '0';
		VRType weight = 0;
		printf("输入一条边的两个顶点及权值:\n");
		scanf("%c%c%d", &v1, &v2, &weight);
		getchar();
		int i = LocateVex(*G, v1);
		int j = LocateVex(*G, v2);
		G->arcs[i][j].adj = weight;

	}
	return *G;
}
MGraph CreateUDG(MGraph *G)//无向图
{
	printf("输入图的边数和顶点数:\n");
	scanf("%d%d", &G->arcnum, &G->vexnum);/*输入图的顶点数和边数*/
	printf("输入图的顶点:\n");
	getchar();
	for (int i = 0; i < G->vexnum; i++)
	{
		scanf("%c", &G->vexs[i]);
		getchar();
	}
	/*初始化邻接矩阵*/
	for (int i = 0; i < MAX_VERTEX_NUM; i++)
	{
		for (int j = 0; j < MAX_VERTEX_NUM; j++)
		{
			G->arcs[i][j].adj = INFINITY;
		}
	}
	for (int k = 0; k < G->arcnum; k++)
	{
		VertexType v1 = '0', v2 = '0';
		VRType weight = 0;
		printf("输入一条边的两个顶点及权值:\n");
		scanf("%c%c%d", &v1, &v2, &weight);
		getchar();
		int i = LocateVex(*G, v1);
		int j = LocateVex(*G, v2);
		G->arcs[i][j].adj = weight;
		G->arcs[j][i].adj = weight;
	}
	return *G;
}
MGraph CreateUDN(MGraph *G)//无向网
{
	printf("输入图的边数和顶点数:\n");
	scanf("%d%d", &G->arcnum, &G->vexnum);/*输入图的顶点数和边数*/
	printf("输入图的顶点:\n");
	getchar();
	for (int i = 0; i < G->vexnum; i++)
	{
		scanf("%c", &G->vexs[i]);
		getchar();
	}
	/*初始化邻接矩阵*/
	for (int i = 0; i < MAX_VERTEX_NUM; i++)
	{
		for (int j = 0; j < MAX_VERTEX_NUM; j++)
		{
			G->arcs[i][j].adj = INFINITY;
		}
	}
	for (int k = 0; k < G->arcnum; k++)
	{
		VertexType v1 = '0', v2 = '0';
		VRType weight = 0;
		printf("输入一条边的两个顶点及权值:\n");
		scanf("%c%c%d", &v1, &v2, &weight);
		getchar();
		int i = LocateVex(*G, v1);
		int j = LocateVex(*G, v2);
		G->arcs[i][j].adj = weight;
		G->arcs[j][i].adj = weight;
	}
	return *G;
}

void CreateGraph(MGraph *G) 
{
	CreateUDG(G);
	/*GraphKind n;
	scanf("%c", &n);
	G->kind = DG;
	switch (G->kind) {
	case DG:   CreateDG(G);//有向图
		break;
	case DN:   CreateDN(G);//有向网
		break;
	case UDG:   CreateUDG(G);//无向图
		break;
	case UDN:   CreateUDN(G);//无向网
		break;
	default:
		printf("ERROR\n");
	}*/
}


void print(MGraph G)
{
	for (int i = 0; i < G.vexnum; i++)
	{
		for (int j = 0; j < G.vexnum; j++)
		{
			if (G.arcs[i][j].adj == INFINITY)
			{
				printf("oo " );
			}
			else
			{
				printf("%d ", G.arcs[i][j].adj);
			}
		}
		printf("\n");
	}
}

int main()
{
	MGraph G;
	CreateGraph(&G);
	print(G);
	return 0;
}
