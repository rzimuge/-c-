#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define  MAX_NODE  200     /*   Max_Node>2n-1  */ 
typedef struct
{
	 int Weight;    /*  权值域  */
	 int Parent, Lchild, Rchild;

} HTNode;
void print(HTNode h[], int m)
{
	for (int i = 1; i <= m; i++)
	{
		printf("%d %d %d %d\n", h[i].Weight, h[i].Parent, h[i].Lchild, h[i].Rchild);
	}
}

void Create_Huffman(int n, HTNode HT[], int m)//m=2*n+1
{
	 int w; int k, j;
	for (k = 1; k <= m; k++)
	{
		if (k <= n)
		{
			printf("\n Please Input Weight : w = ? ");
			scanf("%d", &w);;
			HT[k].Weight = w;
		}
		else
		{
			HT[k].Weight = 0;
		}
		HT[k].Lchild = 0;
		HT[k].Rchild = 0;
		HT[k].Parent = 0;
	}
	for (k = n + 1; k <= m; k++)  //合并形成非叶子结点
	{
		int w1 = 32767, w2 = w1; //  w1 , w2分别保存权值最小的两个权值
		int  p1 = 0, p2 = 0;         // p1 , p2保存两个最小权值的下标
		for (int j = 1; j <= k - 1; j++)
		{
			if (HT[j].Parent == 0)    // 尚未合并 
			{
				if (HT[j].Weight < w1)
				{
					w2 = w1; p2 = p1;
					w1 = HT[j].Weight; p1 = j;
				}
				else if (HT[j].Weight < w2)
				{
					w2 = HT[j].Weight;  p2 = j;
				}
			}    /*  找到权值最小的两个值及其下标  */
		}
		HT[k].Lchild = p1;
		HT[k].Rchild = p2;
		HT[k].Weight = w1 + w2;
		HT[p1].Parent = k;
		HT[p2].Parent = k;
	}
}

void Huff_coding(int n, HTNode HT[], int m)//m=n+1 
{
	int k, sp, fp=0;
	char **HC=(char **)malloc(m * sizeof(char *));
	for (int k = 1; k < n + 1; k++)
	{
		int ii = 0;
		HC[k] = (char *)malloc(1 * sizeof(char));
		for (int j=k,i=1;HT[j].Parent!=0;i++)
		{
			sp = HT[j].Parent;
			if (HT[sp].Rchild == j)
			{
				 realloc( HC[k],(i+1) * sizeof(char) );
				 HC[k][i-1] = '1';
			}
			else
			{
				realloc(HC[k], (i) * sizeof(char));
				HC[k][i-1] = '0';
			}
			j = sp;
			HC[k][i] = '\0';
			ii = i;
		}

		char *cd = (char *)malloc(ii * sizeof(char)); 
		for (int o = 0; o < ii; o++)
		{
			cd[o] = HC[k][o];
		}
		for (int o = 0; o < ii; o++)
		{
			 HC[k][ii-1-o]=cd[o] ;
		}
	}
	for (int i = 1; i<=n; i++)
	{
		printf("%s\n", HC[i]);
	}
}

int WPL( HTNode HT[], unsigned m) //m=2*n-1
{
	 int wpl = 0;
	for (int i = 1; i <= m; i++)
	{
		if (HT[i].Lchild != 0 || HT[i].Rchild != 0)
		{
			wpl += HT[i].Weight;
		}
	}
	return wpl;
}

int main()
{
	HTNode h[MAX_NODE];
	Create_Huffman(6, h, 11);
	print(h, 11);	
	Huff_coding(6, h, 11);
	printf("%d", WPL(h, 11));
	return 0;
}
